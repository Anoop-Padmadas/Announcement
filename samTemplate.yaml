AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AnnouncementServicePipeLine
Parameters:
    S3BucketName:
        Type: String
        Description: 'announcement-stack-template'
        Default: 'announcement-stack-template'
Resources:
  AnnouncementUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: AnnouncementUserPool
  AnnouncementUsers:
    Type: 'AWS::Cognito::UserPoolUser'
    Properties: 
      Username: AnnouncementUser
      UserPoolId: !Ref AnnouncementUserPool
    DependsOn: AnnouncementUserPool
  AnnouncementUserPoolServer:
    Type: 'AWS::Cognito::UserPoolResourceServer'
    Properties:
      Identifier: announcement
      Name: announcement
      UserPoolId: !Ref AnnouncementUserPool
      Scopes:
        - ScopeName: Post
          ScopeDescription: create resource
        - ScopeName: Get
          ScopeDescription: Get resource
    DependsOn: AnnouncementUserPool
  AnnouncementUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: 'true'
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - announcement/Post
      ClientName: AnnouncementAdministrator
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: 'true'
      UserPoolId: !Ref AnnouncementUserPool
    DependsOn: AnnouncementUserPoolServer
  AnnouncementServiceUsersPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthFlowsUserPoolClient: 'true'
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthScopes:
        - announcement/Get
      ClientName: AnnouncementServiceClients
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: 'true'
      UserPoolId: !Ref AnnouncementUserPool
    DependsOn: AnnouncementUserPoolServer
  AnnouncementDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: announcementoauthkey
      UserPoolId: !Ref AnnouncementUserPool
    DependsOn: 
      - AnnouncementUserPoolClient
      - AnnouncementServiceUsersPoolClient
  AnnouncementMicroService:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./src
      Description: 'Lambda Announcement service'
      FunctionName: AnnouncementMicroService
      Handler: AnnouncementService.lambda_handler
      Runtime: python3.8
      Environment: 
         Variables: 
            defaultLimit: 5
      Role: !GetAtt AnnouncementMSIAMRole.Arn
  #AnnouncementGetService:
  #  Type: 'AWS::Lambda::Function'
  #  Properties:
  #    Code:
  #      S3Bucket: announcement-lamda-code
  #      S3Key: getAnnouncement.py.zip
  #    FunctionName: AnnouncementGetService
  #    Handler: getAnnouncement.lambda_handler
  #    Runtime: python3.8
  #    Role: !GetAtt AnnouncementMSIAMRole.Arn
  AnnouncementMicroServiceApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: AnnouncementMicroServiceApi
      EndpointConfiguration:
        Type: EDGE
      StageName: v1    
      DefinitionBody:
        Fn::Transform:
            Name: AWS::Include
            Parameters:
                Location: 
                    Fn::Join:
                      - ''
                      - - 's3://'
                        - Ref: S3BucketName
                        - '/swagger.yaml'
    DependsOn:
      - AnnouncementMicroService
      - AnnouncementDomain
  APIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt AnnouncementMicroService.Arn
      Principal: apigateway.amazonaws.com
    DependsOn: AnnouncementMicroServiceApi
  #APIGetPermission:
  #  Type: 'AWS::Lambda::Permission'
  #  Properties:
  #    Action: 'lambda:InvokeFunction'
  #    FunctionName: !GetAtt AnnouncementGetService.Arn
  #    Principal: apigateway.amazonaws.com
  #  DependsOn: AnnouncementApiDeploymentV1
  AnnouncementServiceApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn: AnnouncementMicroServiceApi
    Properties: 
        Name: AnnouncementServiceApiKey
        Description: Announcement Service API Key
        Enabled: 'true'
        StageKeys:
         -  RestApiId: !Ref AnnouncementMicroServiceApi
            StageName: v1
  AnnouncementUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: AnnouncementServiceApiKey
    Properties:
        ApiStages: 
            - ApiId: !Ref AnnouncementMicroServiceApi
              Stage: v1
        Description: Announcement usage plan
        UsagePlanName: Announcement_Service_UsagePlan
  UsagePlanKey:
     Type: 'AWS::ApiGateway::UsagePlanKey'
     Properties:
       KeyId: !Ref AnnouncementServiceApiKey
       KeyType: API_KEY
       UsagePlanId: !Ref AnnouncementUsagePlan
     DependsOn: AnnouncementUsagePlan
  AnnouncementTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: AnnouncementTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  AnnouncementMSIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AnnouncementMSServiceLambdaDbPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                Resource: !GetAtt AnnouncementTable.Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
